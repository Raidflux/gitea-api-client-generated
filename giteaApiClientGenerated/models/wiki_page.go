// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WikiPage WikiPage a wiki page
//
// swagger:model WikiPage
type WikiPage struct {

	// commit count
	CommitCount int64 `json:"commit_count,omitempty"`

	// Page content, base64 encoded
	ContentBase64 string `json:"content_base64,omitempty"`

	// footer
	Footer string `json:"footer,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// sidebar
	Sidebar string `json:"sidebar,omitempty"`

	// sub URL
	SubURL string `json:"sub_url,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// last commit
	LastCommit *WikiCommit `json:"last_commit,omitempty"`
}

// Validate validates this wiki page
func (m *WikiPage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastCommit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WikiPage) validateLastCommit(formats strfmt.Registry) error {
	if swag.IsZero(m.LastCommit) { // not required
		return nil
	}

	if m.LastCommit != nil {
		if err := m.LastCommit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_commit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_commit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this wiki page based on the context it is used
func (m *WikiPage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastCommit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WikiPage) contextValidateLastCommit(ctx context.Context, formats strfmt.Registry) error {

	if m.LastCommit != nil {

		if swag.IsZero(m.LastCommit) { // not required
			return nil
		}

		if err := m.LastCommit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_commit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_commit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WikiPage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WikiPage) UnmarshalBinary(b []byte) error {
	var res WikiPage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
