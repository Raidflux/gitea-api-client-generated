// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"giteaApiClientGenerated/models"
)

// UserGetTokensReader is a Reader for the UserGetTokens structure.
type UserGetTokensReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserGetTokensReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserGetTokensOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUserGetTokensForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /users/{username}/tokens] userGetTokens", response, response.Code())
	}
}

// NewUserGetTokensOK creates a UserGetTokensOK with default headers values
func NewUserGetTokensOK() *UserGetTokensOK {
	return &UserGetTokensOK{}
}

/*
UserGetTokensOK describes a response with status code 200, with default header values.

AccessTokenList represents a list of API access token.
*/
type UserGetTokensOK struct {
	Payload []*models.AccessToken
}

// IsSuccess returns true when this user get tokens o k response has a 2xx status code
func (o *UserGetTokensOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user get tokens o k response has a 3xx status code
func (o *UserGetTokensOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user get tokens o k response has a 4xx status code
func (o *UserGetTokensOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user get tokens o k response has a 5xx status code
func (o *UserGetTokensOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user get tokens o k response a status code equal to that given
func (o *UserGetTokensOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the user get tokens o k response
func (o *UserGetTokensOK) Code() int {
	return 200
}

func (o *UserGetTokensOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{username}/tokens][%d] userGetTokensOK %s", 200, payload)
}

func (o *UserGetTokensOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /users/{username}/tokens][%d] userGetTokensOK %s", 200, payload)
}

func (o *UserGetTokensOK) GetPayload() []*models.AccessToken {
	return o.Payload
}

func (o *UserGetTokensOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserGetTokensForbidden creates a UserGetTokensForbidden with default headers values
func NewUserGetTokensForbidden() *UserGetTokensForbidden {
	return &UserGetTokensForbidden{}
}

/*
UserGetTokensForbidden describes a response with status code 403, with default header values.

APIForbiddenError is a forbidden error response
*/
type UserGetTokensForbidden struct {
	Message string
	URL     string
}

// IsSuccess returns true when this user get tokens forbidden response has a 2xx status code
func (o *UserGetTokensForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user get tokens forbidden response has a 3xx status code
func (o *UserGetTokensForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user get tokens forbidden response has a 4xx status code
func (o *UserGetTokensForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this user get tokens forbidden response has a 5xx status code
func (o *UserGetTokensForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this user get tokens forbidden response a status code equal to that given
func (o *UserGetTokensForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the user get tokens forbidden response
func (o *UserGetTokensForbidden) Code() int {
	return 403
}

func (o *UserGetTokensForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{username}/tokens][%d] userGetTokensForbidden", 403)
}

func (o *UserGetTokensForbidden) String() string {
	return fmt.Sprintf("[GET /users/{username}/tokens][%d] userGetTokensForbidden", 403)
}

func (o *UserGetTokensForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header message
	hdrMessage := response.GetHeader("message")

	if hdrMessage != "" {
		o.Message = hdrMessage
	}

	// hydrates response header url
	hdrURL := response.GetHeader("url")

	if hdrURL != "" {
		o.URL = hdrURL
	}

	return nil
}
