// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUserListActivityFeedsParams creates a new UserListActivityFeedsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUserListActivityFeedsParams() *UserListActivityFeedsParams {
	return &UserListActivityFeedsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUserListActivityFeedsParamsWithTimeout creates a new UserListActivityFeedsParams object
// with the ability to set a timeout on a request.
func NewUserListActivityFeedsParamsWithTimeout(timeout time.Duration) *UserListActivityFeedsParams {
	return &UserListActivityFeedsParams{
		timeout: timeout,
	}
}

// NewUserListActivityFeedsParamsWithContext creates a new UserListActivityFeedsParams object
// with the ability to set a context for a request.
func NewUserListActivityFeedsParamsWithContext(ctx context.Context) *UserListActivityFeedsParams {
	return &UserListActivityFeedsParams{
		Context: ctx,
	}
}

// NewUserListActivityFeedsParamsWithHTTPClient creates a new UserListActivityFeedsParams object
// with the ability to set a custom HTTPClient for a request.
func NewUserListActivityFeedsParamsWithHTTPClient(client *http.Client) *UserListActivityFeedsParams {
	return &UserListActivityFeedsParams{
		HTTPClient: client,
	}
}

/*
UserListActivityFeedsParams contains all the parameters to send to the API endpoint

	for the user list activity feeds operation.

	Typically these are written to a http.Request.
*/
type UserListActivityFeedsParams struct {

	/* Date.

	   the date of the activities to be found

	   Format: date
	*/
	Date *strfmt.Date

	/* Limit.

	   page size of results
	*/
	Limit *int64

	/* OnlyPerformedBy.

	   if true, only show actions performed by the requested user
	*/
	OnlyPerformedBy *bool

	/* Page.

	   page number of results to return (1-based)
	*/
	Page *int64

	/* Username.

	   username of user
	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the user list activity feeds params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UserListActivityFeedsParams) WithDefaults() *UserListActivityFeedsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the user list activity feeds params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UserListActivityFeedsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the user list activity feeds params
func (o *UserListActivityFeedsParams) WithTimeout(timeout time.Duration) *UserListActivityFeedsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user list activity feeds params
func (o *UserListActivityFeedsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user list activity feeds params
func (o *UserListActivityFeedsParams) WithContext(ctx context.Context) *UserListActivityFeedsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user list activity feeds params
func (o *UserListActivityFeedsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user list activity feeds params
func (o *UserListActivityFeedsParams) WithHTTPClient(client *http.Client) *UserListActivityFeedsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user list activity feeds params
func (o *UserListActivityFeedsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDate adds the date to the user list activity feeds params
func (o *UserListActivityFeedsParams) WithDate(date *strfmt.Date) *UserListActivityFeedsParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the user list activity feeds params
func (o *UserListActivityFeedsParams) SetDate(date *strfmt.Date) {
	o.Date = date
}

// WithLimit adds the limit to the user list activity feeds params
func (o *UserListActivityFeedsParams) WithLimit(limit *int64) *UserListActivityFeedsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the user list activity feeds params
func (o *UserListActivityFeedsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOnlyPerformedBy adds the onlyPerformedBy to the user list activity feeds params
func (o *UserListActivityFeedsParams) WithOnlyPerformedBy(onlyPerformedBy *bool) *UserListActivityFeedsParams {
	o.SetOnlyPerformedBy(onlyPerformedBy)
	return o
}

// SetOnlyPerformedBy adds the onlyPerformedBy to the user list activity feeds params
func (o *UserListActivityFeedsParams) SetOnlyPerformedBy(onlyPerformedBy *bool) {
	o.OnlyPerformedBy = onlyPerformedBy
}

// WithPage adds the page to the user list activity feeds params
func (o *UserListActivityFeedsParams) WithPage(page *int64) *UserListActivityFeedsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the user list activity feeds params
func (o *UserListActivityFeedsParams) SetPage(page *int64) {
	o.Page = page
}

// WithUsername adds the username to the user list activity feeds params
func (o *UserListActivityFeedsParams) WithUsername(username string) *UserListActivityFeedsParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the user list activity feeds params
func (o *UserListActivityFeedsParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *UserListActivityFeedsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Date != nil {

		// query param date
		var qrDate strfmt.Date

		if o.Date != nil {
			qrDate = *o.Date
		}
		qDate := qrDate.String()
		if qDate != "" {

			if err := r.SetQueryParam("date", qDate); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.OnlyPerformedBy != nil {

		// query param only-performed-by
		var qrOnlyPerformedBy bool

		if o.OnlyPerformedBy != nil {
			qrOnlyPerformedBy = *o.OnlyPerformedBy
		}
		qOnlyPerformedBy := swag.FormatBool(qrOnlyPerformedBy)
		if qOnlyPerformedBy != "" {

			if err := r.SetQueryParam("only-performed-by", qOnlyPerformedBy); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	// path param username
	if err := r.SetPathParam("username", o.Username); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
