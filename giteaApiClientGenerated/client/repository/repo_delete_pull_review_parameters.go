// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRepoDeletePullReviewParams creates a new RepoDeletePullReviewParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRepoDeletePullReviewParams() *RepoDeletePullReviewParams {
	return &RepoDeletePullReviewParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRepoDeletePullReviewParamsWithTimeout creates a new RepoDeletePullReviewParams object
// with the ability to set a timeout on a request.
func NewRepoDeletePullReviewParamsWithTimeout(timeout time.Duration) *RepoDeletePullReviewParams {
	return &RepoDeletePullReviewParams{
		timeout: timeout,
	}
}

// NewRepoDeletePullReviewParamsWithContext creates a new RepoDeletePullReviewParams object
// with the ability to set a context for a request.
func NewRepoDeletePullReviewParamsWithContext(ctx context.Context) *RepoDeletePullReviewParams {
	return &RepoDeletePullReviewParams{
		Context: ctx,
	}
}

// NewRepoDeletePullReviewParamsWithHTTPClient creates a new RepoDeletePullReviewParams object
// with the ability to set a custom HTTPClient for a request.
func NewRepoDeletePullReviewParamsWithHTTPClient(client *http.Client) *RepoDeletePullReviewParams {
	return &RepoDeletePullReviewParams{
		HTTPClient: client,
	}
}

/*
RepoDeletePullReviewParams contains all the parameters to send to the API endpoint

	for the repo delete pull review operation.

	Typically these are written to a http.Request.
*/
type RepoDeletePullReviewParams struct {

	/* ID.

	   id of the review

	   Format: int64
	*/
	ID int64

	/* Index.

	   index of the pull request

	   Format: int64
	*/
	Index int64

	/* Owner.

	   owner of the repo
	*/
	Owner string

	/* Repo.

	   name of the repo
	*/
	Repo string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the repo delete pull review params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RepoDeletePullReviewParams) WithDefaults() *RepoDeletePullReviewParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the repo delete pull review params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RepoDeletePullReviewParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the repo delete pull review params
func (o *RepoDeletePullReviewParams) WithTimeout(timeout time.Duration) *RepoDeletePullReviewParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repo delete pull review params
func (o *RepoDeletePullReviewParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repo delete pull review params
func (o *RepoDeletePullReviewParams) WithContext(ctx context.Context) *RepoDeletePullReviewParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repo delete pull review params
func (o *RepoDeletePullReviewParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repo delete pull review params
func (o *RepoDeletePullReviewParams) WithHTTPClient(client *http.Client) *RepoDeletePullReviewParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repo delete pull review params
func (o *RepoDeletePullReviewParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the repo delete pull review params
func (o *RepoDeletePullReviewParams) WithID(id int64) *RepoDeletePullReviewParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the repo delete pull review params
func (o *RepoDeletePullReviewParams) SetID(id int64) {
	o.ID = id
}

// WithIndex adds the index to the repo delete pull review params
func (o *RepoDeletePullReviewParams) WithIndex(index int64) *RepoDeletePullReviewParams {
	o.SetIndex(index)
	return o
}

// SetIndex adds the index to the repo delete pull review params
func (o *RepoDeletePullReviewParams) SetIndex(index int64) {
	o.Index = index
}

// WithOwner adds the owner to the repo delete pull review params
func (o *RepoDeletePullReviewParams) WithOwner(owner string) *RepoDeletePullReviewParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the repo delete pull review params
func (o *RepoDeletePullReviewParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithRepo adds the repo to the repo delete pull review params
func (o *RepoDeletePullReviewParams) WithRepo(repo string) *RepoDeletePullReviewParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the repo delete pull review params
func (o *RepoDeletePullReviewParams) SetRepo(repo string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *RepoDeletePullReviewParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	// path param index
	if err := r.SetPathParam("index", swag.FormatInt64(o.Index)); err != nil {
		return err
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
