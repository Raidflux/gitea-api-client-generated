// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RepoGetRawFileReader is a Reader for the RepoGetRawFile structure.
type RepoGetRawFileReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *RepoGetRawFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepoGetRawFileOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRepoGetRawFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /repos/{owner}/{repo}/raw/{filepath}] repoGetRawFile", response, response.Code())
	}
}

// NewRepoGetRawFileOK creates a RepoGetRawFileOK with default headers values
func NewRepoGetRawFileOK(writer io.Writer) *RepoGetRawFileOK {
	return &RepoGetRawFileOK{

		Payload: writer,
	}
}

/*
RepoGetRawFileOK describes a response with status code 200, with default header values.

Returns raw file content.
*/
type RepoGetRawFileOK struct {
	Payload io.Writer
}

// IsSuccess returns true when this repo get raw file o k response has a 2xx status code
func (o *RepoGetRawFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this repo get raw file o k response has a 3xx status code
func (o *RepoGetRawFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo get raw file o k response has a 4xx status code
func (o *RepoGetRawFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this repo get raw file o k response has a 5xx status code
func (o *RepoGetRawFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this repo get raw file o k response a status code equal to that given
func (o *RepoGetRawFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the repo get raw file o k response
func (o *RepoGetRawFileOK) Code() int {
	return 200
}

func (o *RepoGetRawFileOK) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/raw/{filepath}][%d] repoGetRawFileOK", 200)
}

func (o *RepoGetRawFileOK) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/raw/{filepath}][%d] repoGetRawFileOK", 200)
}

func (o *RepoGetRawFileOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *RepoGetRawFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepoGetRawFileNotFound creates a RepoGetRawFileNotFound with default headers values
func NewRepoGetRawFileNotFound() *RepoGetRawFileNotFound {
	return &RepoGetRawFileNotFound{}
}

/*
RepoGetRawFileNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type RepoGetRawFileNotFound struct {
}

// IsSuccess returns true when this repo get raw file not found response has a 2xx status code
func (o *RepoGetRawFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repo get raw file not found response has a 3xx status code
func (o *RepoGetRawFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo get raw file not found response has a 4xx status code
func (o *RepoGetRawFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this repo get raw file not found response has a 5xx status code
func (o *RepoGetRawFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this repo get raw file not found response a status code equal to that given
func (o *RepoGetRawFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the repo get raw file not found response
func (o *RepoGetRawFileNotFound) Code() int {
	return 404
}

func (o *RepoGetRawFileNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/raw/{filepath}][%d] repoGetRawFileNotFound", 404)
}

func (o *RepoGetRawFileNotFound) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/raw/{filepath}][%d] repoGetRawFileNotFound", 404)
}

func (o *RepoGetRawFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
