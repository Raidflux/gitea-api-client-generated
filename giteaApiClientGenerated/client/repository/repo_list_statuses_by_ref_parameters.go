// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRepoListStatusesByRefParams creates a new RepoListStatusesByRefParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRepoListStatusesByRefParams() *RepoListStatusesByRefParams {
	return &RepoListStatusesByRefParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRepoListStatusesByRefParamsWithTimeout creates a new RepoListStatusesByRefParams object
// with the ability to set a timeout on a request.
func NewRepoListStatusesByRefParamsWithTimeout(timeout time.Duration) *RepoListStatusesByRefParams {
	return &RepoListStatusesByRefParams{
		timeout: timeout,
	}
}

// NewRepoListStatusesByRefParamsWithContext creates a new RepoListStatusesByRefParams object
// with the ability to set a context for a request.
func NewRepoListStatusesByRefParamsWithContext(ctx context.Context) *RepoListStatusesByRefParams {
	return &RepoListStatusesByRefParams{
		Context: ctx,
	}
}

// NewRepoListStatusesByRefParamsWithHTTPClient creates a new RepoListStatusesByRefParams object
// with the ability to set a custom HTTPClient for a request.
func NewRepoListStatusesByRefParamsWithHTTPClient(client *http.Client) *RepoListStatusesByRefParams {
	return &RepoListStatusesByRefParams{
		HTTPClient: client,
	}
}

/*
RepoListStatusesByRefParams contains all the parameters to send to the API endpoint

	for the repo list statuses by ref operation.

	Typically these are written to a http.Request.
*/
type RepoListStatusesByRefParams struct {

	/* Limit.

	   page size of results
	*/
	Limit *int64

	/* Owner.

	   owner of the repo
	*/
	Owner string

	/* Page.

	   page number of results to return (1-based)
	*/
	Page *int64

	/* Ref.

	   name of branch/tag/commit
	*/
	Ref string

	/* Repo.

	   name of the repo
	*/
	Repo string

	/* Sort.

	   type of sort
	*/
	Sort *string

	/* State.

	   type of state
	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the repo list statuses by ref params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RepoListStatusesByRefParams) WithDefaults() *RepoListStatusesByRefParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the repo list statuses by ref params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RepoListStatusesByRefParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) WithTimeout(timeout time.Duration) *RepoListStatusesByRefParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) WithContext(ctx context.Context) *RepoListStatusesByRefParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) WithHTTPClient(client *http.Client) *RepoListStatusesByRefParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) WithLimit(limit *int64) *RepoListStatusesByRefParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOwner adds the owner to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) WithOwner(owner string) *RepoListStatusesByRefParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithPage adds the page to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) WithPage(page *int64) *RepoListStatusesByRefParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) SetPage(page *int64) {
	o.Page = page
}

// WithRef adds the ref to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) WithRef(ref string) *RepoListStatusesByRefParams {
	o.SetRef(ref)
	return o
}

// SetRef adds the ref to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) SetRef(ref string) {
	o.Ref = ref
}

// WithRepo adds the repo to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) WithRepo(repo string) *RepoListStatusesByRefParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) SetRepo(repo string) {
	o.Repo = repo
}

// WithSort adds the sort to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) WithSort(sort *string) *RepoListStatusesByRefParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithState adds the state to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) WithState(state *string) *RepoListStatusesByRefParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the repo list statuses by ref params
func (o *RepoListStatusesByRefParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *RepoListStatusesByRefParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	// path param ref
	if err := r.SetPathParam("ref", o.Ref); err != nil {
		return err
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
