// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRepoUpdatePullRequestParams creates a new RepoUpdatePullRequestParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRepoUpdatePullRequestParams() *RepoUpdatePullRequestParams {
	return &RepoUpdatePullRequestParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRepoUpdatePullRequestParamsWithTimeout creates a new RepoUpdatePullRequestParams object
// with the ability to set a timeout on a request.
func NewRepoUpdatePullRequestParamsWithTimeout(timeout time.Duration) *RepoUpdatePullRequestParams {
	return &RepoUpdatePullRequestParams{
		timeout: timeout,
	}
}

// NewRepoUpdatePullRequestParamsWithContext creates a new RepoUpdatePullRequestParams object
// with the ability to set a context for a request.
func NewRepoUpdatePullRequestParamsWithContext(ctx context.Context) *RepoUpdatePullRequestParams {
	return &RepoUpdatePullRequestParams{
		Context: ctx,
	}
}

// NewRepoUpdatePullRequestParamsWithHTTPClient creates a new RepoUpdatePullRequestParams object
// with the ability to set a custom HTTPClient for a request.
func NewRepoUpdatePullRequestParamsWithHTTPClient(client *http.Client) *RepoUpdatePullRequestParams {
	return &RepoUpdatePullRequestParams{
		HTTPClient: client,
	}
}

/*
RepoUpdatePullRequestParams contains all the parameters to send to the API endpoint

	for the repo update pull request operation.

	Typically these are written to a http.Request.
*/
type RepoUpdatePullRequestParams struct {

	/* Index.

	   index of the pull request to get

	   Format: int64
	*/
	Index int64

	/* Owner.

	   owner of the repo
	*/
	Owner string

	/* Repo.

	   name of the repo
	*/
	Repo string

	/* Style.

	   how to update pull request
	*/
	Style *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the repo update pull request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RepoUpdatePullRequestParams) WithDefaults() *RepoUpdatePullRequestParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the repo update pull request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RepoUpdatePullRequestParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the repo update pull request params
func (o *RepoUpdatePullRequestParams) WithTimeout(timeout time.Duration) *RepoUpdatePullRequestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repo update pull request params
func (o *RepoUpdatePullRequestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repo update pull request params
func (o *RepoUpdatePullRequestParams) WithContext(ctx context.Context) *RepoUpdatePullRequestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repo update pull request params
func (o *RepoUpdatePullRequestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repo update pull request params
func (o *RepoUpdatePullRequestParams) WithHTTPClient(client *http.Client) *RepoUpdatePullRequestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repo update pull request params
func (o *RepoUpdatePullRequestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIndex adds the index to the repo update pull request params
func (o *RepoUpdatePullRequestParams) WithIndex(index int64) *RepoUpdatePullRequestParams {
	o.SetIndex(index)
	return o
}

// SetIndex adds the index to the repo update pull request params
func (o *RepoUpdatePullRequestParams) SetIndex(index int64) {
	o.Index = index
}

// WithOwner adds the owner to the repo update pull request params
func (o *RepoUpdatePullRequestParams) WithOwner(owner string) *RepoUpdatePullRequestParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the repo update pull request params
func (o *RepoUpdatePullRequestParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithRepo adds the repo to the repo update pull request params
func (o *RepoUpdatePullRequestParams) WithRepo(repo string) *RepoUpdatePullRequestParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the repo update pull request params
func (o *RepoUpdatePullRequestParams) SetRepo(repo string) {
	o.Repo = repo
}

// WithStyle adds the style to the repo update pull request params
func (o *RepoUpdatePullRequestParams) WithStyle(style *string) *RepoUpdatePullRequestParams {
	o.SetStyle(style)
	return o
}

// SetStyle adds the style to the repo update pull request params
func (o *RepoUpdatePullRequestParams) SetStyle(style *string) {
	o.Style = style
}

// WriteToRequest writes these params to a swagger request
func (o *RepoUpdatePullRequestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param index
	if err := r.SetPathParam("index", swag.FormatInt64(o.Index)); err != nil {
		return err
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if o.Style != nil {

		// query param style
		var qrStyle string

		if o.Style != nil {
			qrStyle = *o.Style
		}
		qStyle := qrStyle
		if qStyle != "" {

			if err := r.SetQueryParam("style", qStyle); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
