// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"giteaApiClientGenerated/models"
)

// RepoValidateIssueConfigReader is a Reader for the RepoValidateIssueConfig structure.
type RepoValidateIssueConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoValidateIssueConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepoValidateIssueConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRepoValidateIssueConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /repos/{owner}/{repo}/issue_config/validate] repoValidateIssueConfig", response, response.Code())
	}
}

// NewRepoValidateIssueConfigOK creates a RepoValidateIssueConfigOK with default headers values
func NewRepoValidateIssueConfigOK() *RepoValidateIssueConfigOK {
	return &RepoValidateIssueConfigOK{}
}

/*
RepoValidateIssueConfigOK describes a response with status code 200, with default header values.

RepoIssueConfigValidation
*/
type RepoValidateIssueConfigOK struct {
	Payload *models.IssueConfigValidation
}

// IsSuccess returns true when this repo validate issue config o k response has a 2xx status code
func (o *RepoValidateIssueConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this repo validate issue config o k response has a 3xx status code
func (o *RepoValidateIssueConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo validate issue config o k response has a 4xx status code
func (o *RepoValidateIssueConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this repo validate issue config o k response has a 5xx status code
func (o *RepoValidateIssueConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this repo validate issue config o k response a status code equal to that given
func (o *RepoValidateIssueConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the repo validate issue config o k response
func (o *RepoValidateIssueConfigOK) Code() int {
	return 200
}

func (o *RepoValidateIssueConfigOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issue_config/validate][%d] repoValidateIssueConfigOK %s", 200, payload)
}

func (o *RepoValidateIssueConfigOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issue_config/validate][%d] repoValidateIssueConfigOK %s", 200, payload)
}

func (o *RepoValidateIssueConfigOK) GetPayload() *models.IssueConfigValidation {
	return o.Payload
}

func (o *RepoValidateIssueConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IssueConfigValidation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepoValidateIssueConfigNotFound creates a RepoValidateIssueConfigNotFound with default headers values
func NewRepoValidateIssueConfigNotFound() *RepoValidateIssueConfigNotFound {
	return &RepoValidateIssueConfigNotFound{}
}

/*
RepoValidateIssueConfigNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type RepoValidateIssueConfigNotFound struct {
}

// IsSuccess returns true when this repo validate issue config not found response has a 2xx status code
func (o *RepoValidateIssueConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repo validate issue config not found response has a 3xx status code
func (o *RepoValidateIssueConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo validate issue config not found response has a 4xx status code
func (o *RepoValidateIssueConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this repo validate issue config not found response has a 5xx status code
func (o *RepoValidateIssueConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this repo validate issue config not found response a status code equal to that given
func (o *RepoValidateIssueConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the repo validate issue config not found response
func (o *RepoValidateIssueConfigNotFound) Code() int {
	return 404
}

func (o *RepoValidateIssueConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issue_config/validate][%d] repoValidateIssueConfigNotFound", 404)
}

func (o *RepoValidateIssueConfigNotFound) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issue_config/validate][%d] repoValidateIssueConfigNotFound", 404)
}

func (o *RepoValidateIssueConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
