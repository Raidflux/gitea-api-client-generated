// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRepoGetAllCommitsParams creates a new RepoGetAllCommitsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRepoGetAllCommitsParams() *RepoGetAllCommitsParams {
	return &RepoGetAllCommitsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRepoGetAllCommitsParamsWithTimeout creates a new RepoGetAllCommitsParams object
// with the ability to set a timeout on a request.
func NewRepoGetAllCommitsParamsWithTimeout(timeout time.Duration) *RepoGetAllCommitsParams {
	return &RepoGetAllCommitsParams{
		timeout: timeout,
	}
}

// NewRepoGetAllCommitsParamsWithContext creates a new RepoGetAllCommitsParams object
// with the ability to set a context for a request.
func NewRepoGetAllCommitsParamsWithContext(ctx context.Context) *RepoGetAllCommitsParams {
	return &RepoGetAllCommitsParams{
		Context: ctx,
	}
}

// NewRepoGetAllCommitsParamsWithHTTPClient creates a new RepoGetAllCommitsParams object
// with the ability to set a custom HTTPClient for a request.
func NewRepoGetAllCommitsParamsWithHTTPClient(client *http.Client) *RepoGetAllCommitsParams {
	return &RepoGetAllCommitsParams{
		HTTPClient: client,
	}
}

/*
RepoGetAllCommitsParams contains all the parameters to send to the API endpoint

	for the repo get all commits operation.

	Typically these are written to a http.Request.
*/
type RepoGetAllCommitsParams struct {

	/* Files.

	   include a list of affected files for every commit (disable for speedup, default 'true')
	*/
	Files *bool

	/* Limit.

	   page size of results (ignored if used with 'path')
	*/
	Limit *int64

	/* Not.

	   commits that match the given specifier will not be listed.
	*/
	Not *string

	/* Owner.

	   owner of the repo
	*/
	Owner string

	/* Page.

	   page number of results to return (1-based)
	*/
	Page *int64

	/* Path.

	   filepath of a file/dir
	*/
	Path *string

	/* Repo.

	   name of the repo
	*/
	Repo string

	/* Sha.

	   SHA or branch to start listing commits from (usually 'master')
	*/
	Sha *string

	/* Stat.

	   include diff stats for every commit (disable for speedup, default 'true')
	*/
	Stat *bool

	/* Verification.

	   include verification for every commit (disable for speedup, default 'true')
	*/
	Verification *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the repo get all commits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RepoGetAllCommitsParams) WithDefaults() *RepoGetAllCommitsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the repo get all commits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RepoGetAllCommitsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithTimeout(timeout time.Duration) *RepoGetAllCommitsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithContext(ctx context.Context) *RepoGetAllCommitsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithHTTPClient(client *http.Client) *RepoGetAllCommitsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFiles adds the files to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithFiles(files *bool) *RepoGetAllCommitsParams {
	o.SetFiles(files)
	return o
}

// SetFiles adds the files to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetFiles(files *bool) {
	o.Files = files
}

// WithLimit adds the limit to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithLimit(limit *int64) *RepoGetAllCommitsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNot adds the not to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithNot(not *string) *RepoGetAllCommitsParams {
	o.SetNot(not)
	return o
}

// SetNot adds the not to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetNot(not *string) {
	o.Not = not
}

// WithOwner adds the owner to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithOwner(owner string) *RepoGetAllCommitsParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithPage adds the page to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithPage(page *int64) *RepoGetAllCommitsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPath adds the path to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithPath(path *string) *RepoGetAllCommitsParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetPath(path *string) {
	o.Path = path
}

// WithRepo adds the repo to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithRepo(repo string) *RepoGetAllCommitsParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetRepo(repo string) {
	o.Repo = repo
}

// WithSha adds the sha to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithSha(sha *string) *RepoGetAllCommitsParams {
	o.SetSha(sha)
	return o
}

// SetSha adds the sha to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetSha(sha *string) {
	o.Sha = sha
}

// WithStat adds the stat to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithStat(stat *bool) *RepoGetAllCommitsParams {
	o.SetStat(stat)
	return o
}

// SetStat adds the stat to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetStat(stat *bool) {
	o.Stat = stat
}

// WithVerification adds the verification to the repo get all commits params
func (o *RepoGetAllCommitsParams) WithVerification(verification *bool) *RepoGetAllCommitsParams {
	o.SetVerification(verification)
	return o
}

// SetVerification adds the verification to the repo get all commits params
func (o *RepoGetAllCommitsParams) SetVerification(verification *bool) {
	o.Verification = verification
}

// WriteToRequest writes these params to a swagger request
func (o *RepoGetAllCommitsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Files != nil {

		// query param files
		var qrFiles bool

		if o.Files != nil {
			qrFiles = *o.Files
		}
		qFiles := swag.FormatBool(qrFiles)
		if qFiles != "" {

			if err := r.SetQueryParam("files", qFiles); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Not != nil {

		// query param not
		var qrNot string

		if o.Not != nil {
			qrNot = *o.Not
		}
		qNot := qrNot
		if qNot != "" {

			if err := r.SetQueryParam("not", qNot); err != nil {
				return err
			}
		}
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Path != nil {

		// query param path
		var qrPath string

		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {

			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if o.Sha != nil {

		// query param sha
		var qrSha string

		if o.Sha != nil {
			qrSha = *o.Sha
		}
		qSha := qrSha
		if qSha != "" {

			if err := r.SetQueryParam("sha", qSha); err != nil {
				return err
			}
		}
	}

	if o.Stat != nil {

		// query param stat
		var qrStat bool

		if o.Stat != nil {
			qrStat = *o.Stat
		}
		qStat := swag.FormatBool(qrStat)
		if qStat != "" {

			if err := r.SetQueryParam("stat", qStat); err != nil {
				return err
			}
		}
	}

	if o.Verification != nil {

		// query param verification
		var qrVerification bool

		if o.Verification != nil {
			qrVerification = *o.Verification
		}
		qVerification := swag.FormatBool(qrVerification)
		if qVerification != "" {

			if err := r.SetQueryParam("verification", qVerification); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
