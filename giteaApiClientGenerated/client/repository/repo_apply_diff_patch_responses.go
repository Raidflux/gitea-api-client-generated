// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"giteaApiClientGenerated/models"
)

// RepoApplyDiffPatchReader is a Reader for the RepoApplyDiffPatch structure.
type RepoApplyDiffPatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoApplyDiffPatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepoApplyDiffPatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRepoApplyDiffPatchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 423:
		result := NewRepoApplyDiffPatchLocked()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /repos/{owner}/{repo}/diffpatch] repoApplyDiffPatch", response, response.Code())
	}
}

// NewRepoApplyDiffPatchOK creates a RepoApplyDiffPatchOK with default headers values
func NewRepoApplyDiffPatchOK() *RepoApplyDiffPatchOK {
	return &RepoApplyDiffPatchOK{}
}

/*
RepoApplyDiffPatchOK describes a response with status code 200, with default header values.

FileResponse
*/
type RepoApplyDiffPatchOK struct {
	Payload *models.FileResponse
}

// IsSuccess returns true when this repo apply diff patch o k response has a 2xx status code
func (o *RepoApplyDiffPatchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this repo apply diff patch o k response has a 3xx status code
func (o *RepoApplyDiffPatchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo apply diff patch o k response has a 4xx status code
func (o *RepoApplyDiffPatchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this repo apply diff patch o k response has a 5xx status code
func (o *RepoApplyDiffPatchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this repo apply diff patch o k response a status code equal to that given
func (o *RepoApplyDiffPatchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the repo apply diff patch o k response
func (o *RepoApplyDiffPatchOK) Code() int {
	return 200
}

func (o *RepoApplyDiffPatchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/diffpatch][%d] repoApplyDiffPatchOK %s", 200, payload)
}

func (o *RepoApplyDiffPatchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/diffpatch][%d] repoApplyDiffPatchOK %s", 200, payload)
}

func (o *RepoApplyDiffPatchOK) GetPayload() *models.FileResponse {
	return o.Payload
}

func (o *RepoApplyDiffPatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FileResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepoApplyDiffPatchNotFound creates a RepoApplyDiffPatchNotFound with default headers values
func NewRepoApplyDiffPatchNotFound() *RepoApplyDiffPatchNotFound {
	return &RepoApplyDiffPatchNotFound{}
}

/*
RepoApplyDiffPatchNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type RepoApplyDiffPatchNotFound struct {
}

// IsSuccess returns true when this repo apply diff patch not found response has a 2xx status code
func (o *RepoApplyDiffPatchNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repo apply diff patch not found response has a 3xx status code
func (o *RepoApplyDiffPatchNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo apply diff patch not found response has a 4xx status code
func (o *RepoApplyDiffPatchNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this repo apply diff patch not found response has a 5xx status code
func (o *RepoApplyDiffPatchNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this repo apply diff patch not found response a status code equal to that given
func (o *RepoApplyDiffPatchNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the repo apply diff patch not found response
func (o *RepoApplyDiffPatchNotFound) Code() int {
	return 404
}

func (o *RepoApplyDiffPatchNotFound) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/diffpatch][%d] repoApplyDiffPatchNotFound", 404)
}

func (o *RepoApplyDiffPatchNotFound) String() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/diffpatch][%d] repoApplyDiffPatchNotFound", 404)
}

func (o *RepoApplyDiffPatchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRepoApplyDiffPatchLocked creates a RepoApplyDiffPatchLocked with default headers values
func NewRepoApplyDiffPatchLocked() *RepoApplyDiffPatchLocked {
	return &RepoApplyDiffPatchLocked{}
}

/*
RepoApplyDiffPatchLocked describes a response with status code 423, with default header values.

APIRepoArchivedError is an error that is raised when an archived repo should be modified
*/
type RepoApplyDiffPatchLocked struct {
	Message string
	URL     string
}

// IsSuccess returns true when this repo apply diff patch locked response has a 2xx status code
func (o *RepoApplyDiffPatchLocked) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repo apply diff patch locked response has a 3xx status code
func (o *RepoApplyDiffPatchLocked) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo apply diff patch locked response has a 4xx status code
func (o *RepoApplyDiffPatchLocked) IsClientError() bool {
	return true
}

// IsServerError returns true when this repo apply diff patch locked response has a 5xx status code
func (o *RepoApplyDiffPatchLocked) IsServerError() bool {
	return false
}

// IsCode returns true when this repo apply diff patch locked response a status code equal to that given
func (o *RepoApplyDiffPatchLocked) IsCode(code int) bool {
	return code == 423
}

// Code gets the status code for the repo apply diff patch locked response
func (o *RepoApplyDiffPatchLocked) Code() int {
	return 423
}

func (o *RepoApplyDiffPatchLocked) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/diffpatch][%d] repoApplyDiffPatchLocked", 423)
}

func (o *RepoApplyDiffPatchLocked) String() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/diffpatch][%d] repoApplyDiffPatchLocked", 423)
}

func (o *RepoApplyDiffPatchLocked) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header message
	hdrMessage := response.GetHeader("message")

	if hdrMessage != "" {
		o.Message = hdrMessage
	}

	// hydrates response header url
	hdrURL := response.GetHeader("url")

	if hdrURL != "" {
		o.URL = hdrURL
	}

	return nil
}
