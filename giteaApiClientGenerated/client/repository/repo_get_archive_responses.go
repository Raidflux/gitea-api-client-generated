// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RepoGetArchiveReader is a Reader for the RepoGetArchive structure.
type RepoGetArchiveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoGetArchiveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepoGetArchiveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRepoGetArchiveNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /repos/{owner}/{repo}/archive/{archive}] repoGetArchive", response, response.Code())
	}
}

// NewRepoGetArchiveOK creates a RepoGetArchiveOK with default headers values
func NewRepoGetArchiveOK() *RepoGetArchiveOK {
	return &RepoGetArchiveOK{}
}

/*
RepoGetArchiveOK describes a response with status code 200, with default header values.

success
*/
type RepoGetArchiveOK struct {
}

// IsSuccess returns true when this repo get archive o k response has a 2xx status code
func (o *RepoGetArchiveOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this repo get archive o k response has a 3xx status code
func (o *RepoGetArchiveOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo get archive o k response has a 4xx status code
func (o *RepoGetArchiveOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this repo get archive o k response has a 5xx status code
func (o *RepoGetArchiveOK) IsServerError() bool {
	return false
}

// IsCode returns true when this repo get archive o k response a status code equal to that given
func (o *RepoGetArchiveOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the repo get archive o k response
func (o *RepoGetArchiveOK) Code() int {
	return 200
}

func (o *RepoGetArchiveOK) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/archive/{archive}][%d] repoGetArchiveOK", 200)
}

func (o *RepoGetArchiveOK) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/archive/{archive}][%d] repoGetArchiveOK", 200)
}

func (o *RepoGetArchiveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRepoGetArchiveNotFound creates a RepoGetArchiveNotFound with default headers values
func NewRepoGetArchiveNotFound() *RepoGetArchiveNotFound {
	return &RepoGetArchiveNotFound{}
}

/*
RepoGetArchiveNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type RepoGetArchiveNotFound struct {
}

// IsSuccess returns true when this repo get archive not found response has a 2xx status code
func (o *RepoGetArchiveNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repo get archive not found response has a 3xx status code
func (o *RepoGetArchiveNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo get archive not found response has a 4xx status code
func (o *RepoGetArchiveNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this repo get archive not found response has a 5xx status code
func (o *RepoGetArchiveNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this repo get archive not found response a status code equal to that given
func (o *RepoGetArchiveNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the repo get archive not found response
func (o *RepoGetArchiveNotFound) Code() int {
	return 404
}

func (o *RepoGetArchiveNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/archive/{archive}][%d] repoGetArchiveNotFound", 404)
}

func (o *RepoGetArchiveNotFound) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/archive/{archive}][%d] repoGetArchiveNotFound", 404)
}

func (o *RepoGetArchiveNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
