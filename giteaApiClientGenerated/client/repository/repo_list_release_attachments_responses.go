// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"giteaApiClientGenerated/models"
)

// RepoListReleaseAttachmentsReader is a Reader for the RepoListReleaseAttachments structure.
type RepoListReleaseAttachmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoListReleaseAttachmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepoListReleaseAttachmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRepoListReleaseAttachmentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /repos/{owner}/{repo}/releases/{id}/assets] repoListReleaseAttachments", response, response.Code())
	}
}

// NewRepoListReleaseAttachmentsOK creates a RepoListReleaseAttachmentsOK with default headers values
func NewRepoListReleaseAttachmentsOK() *RepoListReleaseAttachmentsOK {
	return &RepoListReleaseAttachmentsOK{}
}

/*
RepoListReleaseAttachmentsOK describes a response with status code 200, with default header values.

AttachmentList
*/
type RepoListReleaseAttachmentsOK struct {
	Payload []*models.Attachment
}

// IsSuccess returns true when this repo list release attachments o k response has a 2xx status code
func (o *RepoListReleaseAttachmentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this repo list release attachments o k response has a 3xx status code
func (o *RepoListReleaseAttachmentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo list release attachments o k response has a 4xx status code
func (o *RepoListReleaseAttachmentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this repo list release attachments o k response has a 5xx status code
func (o *RepoListReleaseAttachmentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this repo list release attachments o k response a status code equal to that given
func (o *RepoListReleaseAttachmentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the repo list release attachments o k response
func (o *RepoListReleaseAttachmentsOK) Code() int {
	return 200
}

func (o *RepoListReleaseAttachmentsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/releases/{id}/assets][%d] repoListReleaseAttachmentsOK %s", 200, payload)
}

func (o *RepoListReleaseAttachmentsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/releases/{id}/assets][%d] repoListReleaseAttachmentsOK %s", 200, payload)
}

func (o *RepoListReleaseAttachmentsOK) GetPayload() []*models.Attachment {
	return o.Payload
}

func (o *RepoListReleaseAttachmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepoListReleaseAttachmentsNotFound creates a RepoListReleaseAttachmentsNotFound with default headers values
func NewRepoListReleaseAttachmentsNotFound() *RepoListReleaseAttachmentsNotFound {
	return &RepoListReleaseAttachmentsNotFound{}
}

/*
RepoListReleaseAttachmentsNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type RepoListReleaseAttachmentsNotFound struct {
}

// IsSuccess returns true when this repo list release attachments not found response has a 2xx status code
func (o *RepoListReleaseAttachmentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repo list release attachments not found response has a 3xx status code
func (o *RepoListReleaseAttachmentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo list release attachments not found response has a 4xx status code
func (o *RepoListReleaseAttachmentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this repo list release attachments not found response has a 5xx status code
func (o *RepoListReleaseAttachmentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this repo list release attachments not found response a status code equal to that given
func (o *RepoListReleaseAttachmentsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the repo list release attachments not found response
func (o *RepoListReleaseAttachmentsNotFound) Code() int {
	return 404
}

func (o *RepoListReleaseAttachmentsNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/releases/{id}/assets][%d] repoListReleaseAttachmentsNotFound", 404)
}

func (o *RepoListReleaseAttachmentsNotFound) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/releases/{id}/assets][%d] repoListReleaseAttachmentsNotFound", 404)
}

func (o *RepoListReleaseAttachmentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
