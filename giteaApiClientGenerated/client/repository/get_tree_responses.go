// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Raidflux/gitea-api-client-generated/giteaApiClientGenerated/models"
)

// GetTreeReader is a Reader for the GetTree structure.
type GetTreeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTreeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTreeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTreeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTreeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /repos/{owner}/{repo}/git/trees/{sha}] GetTree", response, response.Code())
	}
}

// NewGetTreeOK creates a GetTreeOK with default headers values
func NewGetTreeOK() *GetTreeOK {
	return &GetTreeOK{}
}

/*
GetTreeOK describes a response with status code 200, with default header values.

GitTreeResponse
*/
type GetTreeOK struct {
	Payload *models.GitTreeResponse
}

// IsSuccess returns true when this get tree o k response has a 2xx status code
func (o *GetTreeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get tree o k response has a 3xx status code
func (o *GetTreeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tree o k response has a 4xx status code
func (o *GetTreeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get tree o k response has a 5xx status code
func (o *GetTreeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get tree o k response a status code equal to that given
func (o *GetTreeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get tree o k response
func (o *GetTreeOK) Code() int {
	return 200
}

func (o *GetTreeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/git/trees/{sha}][%d] getTreeOK %s", 200, payload)
}

func (o *GetTreeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/git/trees/{sha}][%d] getTreeOK %s", 200, payload)
}

func (o *GetTreeOK) GetPayload() *models.GitTreeResponse {
	return o.Payload
}

func (o *GetTreeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GitTreeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTreeBadRequest creates a GetTreeBadRequest with default headers values
func NewGetTreeBadRequest() *GetTreeBadRequest {
	return &GetTreeBadRequest{}
}

/*
GetTreeBadRequest describes a response with status code 400, with default header values.

APIError is error format response
*/
type GetTreeBadRequest struct {
	Message string
	URL     string
}

// IsSuccess returns true when this get tree bad request response has a 2xx status code
func (o *GetTreeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tree bad request response has a 3xx status code
func (o *GetTreeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tree bad request response has a 4xx status code
func (o *GetTreeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tree bad request response has a 5xx status code
func (o *GetTreeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get tree bad request response a status code equal to that given
func (o *GetTreeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get tree bad request response
func (o *GetTreeBadRequest) Code() int {
	return 400
}

func (o *GetTreeBadRequest) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/git/trees/{sha}][%d] getTreeBadRequest", 400)
}

func (o *GetTreeBadRequest) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/git/trees/{sha}][%d] getTreeBadRequest", 400)
}

func (o *GetTreeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header message
	hdrMessage := response.GetHeader("message")

	if hdrMessage != "" {
		o.Message = hdrMessage
	}

	// hydrates response header url
	hdrURL := response.GetHeader("url")

	if hdrURL != "" {
		o.URL = hdrURL
	}

	return nil
}

// NewGetTreeNotFound creates a GetTreeNotFound with default headers values
func NewGetTreeNotFound() *GetTreeNotFound {
	return &GetTreeNotFound{}
}

/*
GetTreeNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type GetTreeNotFound struct {
}

// IsSuccess returns true when this get tree not found response has a 2xx status code
func (o *GetTreeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tree not found response has a 3xx status code
func (o *GetTreeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tree not found response has a 4xx status code
func (o *GetTreeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tree not found response has a 5xx status code
func (o *GetTreeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get tree not found response a status code equal to that given
func (o *GetTreeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get tree not found response
func (o *GetTreeNotFound) Code() int {
	return 404
}

func (o *GetTreeNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/git/trees/{sha}][%d] getTreeNotFound", 404)
}

func (o *GetTreeNotFound) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/git/trees/{sha}][%d] getTreeNotFound", 404)
}

func (o *GetTreeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
