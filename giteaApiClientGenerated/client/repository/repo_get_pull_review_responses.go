// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Raidflux/gitea-api-client-generated/giteaApiClientGenerated/models"
)

// RepoGetPullReviewReader is a Reader for the RepoGetPullReview structure.
type RepoGetPullReviewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoGetPullReviewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepoGetPullReviewOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRepoGetPullReviewNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /repos/{owner}/{repo}/pulls/{index}/reviews/{id}] repoGetPullReview", response, response.Code())
	}
}

// NewRepoGetPullReviewOK creates a RepoGetPullReviewOK with default headers values
func NewRepoGetPullReviewOK() *RepoGetPullReviewOK {
	return &RepoGetPullReviewOK{}
}

/*
RepoGetPullReviewOK describes a response with status code 200, with default header values.

PullReview
*/
type RepoGetPullReviewOK struct {
	Payload *models.PullReview
}

// IsSuccess returns true when this repo get pull review o k response has a 2xx status code
func (o *RepoGetPullReviewOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this repo get pull review o k response has a 3xx status code
func (o *RepoGetPullReviewOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo get pull review o k response has a 4xx status code
func (o *RepoGetPullReviewOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this repo get pull review o k response has a 5xx status code
func (o *RepoGetPullReviewOK) IsServerError() bool {
	return false
}

// IsCode returns true when this repo get pull review o k response a status code equal to that given
func (o *RepoGetPullReviewOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the repo get pull review o k response
func (o *RepoGetPullReviewOK) Code() int {
	return 200
}

func (o *RepoGetPullReviewOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/pulls/{index}/reviews/{id}][%d] repoGetPullReviewOK %s", 200, payload)
}

func (o *RepoGetPullReviewOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/pulls/{index}/reviews/{id}][%d] repoGetPullReviewOK %s", 200, payload)
}

func (o *RepoGetPullReviewOK) GetPayload() *models.PullReview {
	return o.Payload
}

func (o *RepoGetPullReviewOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PullReview)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepoGetPullReviewNotFound creates a RepoGetPullReviewNotFound with default headers values
func NewRepoGetPullReviewNotFound() *RepoGetPullReviewNotFound {
	return &RepoGetPullReviewNotFound{}
}

/*
RepoGetPullReviewNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type RepoGetPullReviewNotFound struct {
}

// IsSuccess returns true when this repo get pull review not found response has a 2xx status code
func (o *RepoGetPullReviewNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repo get pull review not found response has a 3xx status code
func (o *RepoGetPullReviewNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo get pull review not found response has a 4xx status code
func (o *RepoGetPullReviewNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this repo get pull review not found response has a 5xx status code
func (o *RepoGetPullReviewNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this repo get pull review not found response a status code equal to that given
func (o *RepoGetPullReviewNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the repo get pull review not found response
func (o *RepoGetPullReviewNotFound) Code() int {
	return 404
}

func (o *RepoGetPullReviewNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/pulls/{index}/reviews/{id}][%d] repoGetPullReviewNotFound", 404)
}

func (o *RepoGetPullReviewNotFound) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/pulls/{index}/reviews/{id}][%d] repoGetPullReviewNotFound", 404)
}

func (o *RepoGetPullReviewNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
