// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Raidflux/gitea-api-client-generated/giteaApiClientGenerated/models"
)

// RepoGetRepoPermissionsReader is a Reader for the RepoGetRepoPermissions structure.
type RepoGetRepoPermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoGetRepoPermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRepoGetRepoPermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRepoGetRepoPermissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRepoGetRepoPermissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /repos/{owner}/{repo}/collaborators/{collaborator}/permission] repoGetRepoPermissions", response, response.Code())
	}
}

// NewRepoGetRepoPermissionsOK creates a RepoGetRepoPermissionsOK with default headers values
func NewRepoGetRepoPermissionsOK() *RepoGetRepoPermissionsOK {
	return &RepoGetRepoPermissionsOK{}
}

/*
RepoGetRepoPermissionsOK describes a response with status code 200, with default header values.

RepoCollaboratorPermission
*/
type RepoGetRepoPermissionsOK struct {
	Payload *models.RepoCollaboratorPermission
}

// IsSuccess returns true when this repo get repo permissions o k response has a 2xx status code
func (o *RepoGetRepoPermissionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this repo get repo permissions o k response has a 3xx status code
func (o *RepoGetRepoPermissionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo get repo permissions o k response has a 4xx status code
func (o *RepoGetRepoPermissionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this repo get repo permissions o k response has a 5xx status code
func (o *RepoGetRepoPermissionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this repo get repo permissions o k response a status code equal to that given
func (o *RepoGetRepoPermissionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the repo get repo permissions o k response
func (o *RepoGetRepoPermissionsOK) Code() int {
	return 200
}

func (o *RepoGetRepoPermissionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/collaborators/{collaborator}/permission][%d] repoGetRepoPermissionsOK %s", 200, payload)
}

func (o *RepoGetRepoPermissionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/collaborators/{collaborator}/permission][%d] repoGetRepoPermissionsOK %s", 200, payload)
}

func (o *RepoGetRepoPermissionsOK) GetPayload() *models.RepoCollaboratorPermission {
	return o.Payload
}

func (o *RepoGetRepoPermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RepoCollaboratorPermission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRepoGetRepoPermissionsForbidden creates a RepoGetRepoPermissionsForbidden with default headers values
func NewRepoGetRepoPermissionsForbidden() *RepoGetRepoPermissionsForbidden {
	return &RepoGetRepoPermissionsForbidden{}
}

/*
RepoGetRepoPermissionsForbidden describes a response with status code 403, with default header values.

APIForbiddenError is a forbidden error response
*/
type RepoGetRepoPermissionsForbidden struct {
	Message string
	URL     string
}

// IsSuccess returns true when this repo get repo permissions forbidden response has a 2xx status code
func (o *RepoGetRepoPermissionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repo get repo permissions forbidden response has a 3xx status code
func (o *RepoGetRepoPermissionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo get repo permissions forbidden response has a 4xx status code
func (o *RepoGetRepoPermissionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this repo get repo permissions forbidden response has a 5xx status code
func (o *RepoGetRepoPermissionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this repo get repo permissions forbidden response a status code equal to that given
func (o *RepoGetRepoPermissionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the repo get repo permissions forbidden response
func (o *RepoGetRepoPermissionsForbidden) Code() int {
	return 403
}

func (o *RepoGetRepoPermissionsForbidden) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/collaborators/{collaborator}/permission][%d] repoGetRepoPermissionsForbidden", 403)
}

func (o *RepoGetRepoPermissionsForbidden) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/collaborators/{collaborator}/permission][%d] repoGetRepoPermissionsForbidden", 403)
}

func (o *RepoGetRepoPermissionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header message
	hdrMessage := response.GetHeader("message")

	if hdrMessage != "" {
		o.Message = hdrMessage
	}

	// hydrates response header url
	hdrURL := response.GetHeader("url")

	if hdrURL != "" {
		o.URL = hdrURL
	}

	return nil
}

// NewRepoGetRepoPermissionsNotFound creates a RepoGetRepoPermissionsNotFound with default headers values
func NewRepoGetRepoPermissionsNotFound() *RepoGetRepoPermissionsNotFound {
	return &RepoGetRepoPermissionsNotFound{}
}

/*
RepoGetRepoPermissionsNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type RepoGetRepoPermissionsNotFound struct {
}

// IsSuccess returns true when this repo get repo permissions not found response has a 2xx status code
func (o *RepoGetRepoPermissionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this repo get repo permissions not found response has a 3xx status code
func (o *RepoGetRepoPermissionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this repo get repo permissions not found response has a 4xx status code
func (o *RepoGetRepoPermissionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this repo get repo permissions not found response has a 5xx status code
func (o *RepoGetRepoPermissionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this repo get repo permissions not found response a status code equal to that given
func (o *RepoGetRepoPermissionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the repo get repo permissions not found response
func (o *RepoGetRepoPermissionsNotFound) Code() int {
	return 404
}

func (o *RepoGetRepoPermissionsNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/collaborators/{collaborator}/permission][%d] repoGetRepoPermissionsNotFound", 404)
}

func (o *RepoGetRepoPermissionsNotFound) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/collaborators/{collaborator}/permission][%d] repoGetRepoPermissionsNotFound", 404)
}

func (o *RepoGetRepoPermissionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
