// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"giteaApiClientGenerated/models"
)

// IssueGetCommentReactionsReader is a Reader for the IssueGetCommentReactions structure.
type IssueGetCommentReactionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueGetCommentReactionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueGetCommentReactionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewIssueGetCommentReactionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIssueGetCommentReactionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /repos/{owner}/{repo}/issues/comments/{id}/reactions] issueGetCommentReactions", response, response.Code())
	}
}

// NewIssueGetCommentReactionsOK creates a IssueGetCommentReactionsOK with default headers values
func NewIssueGetCommentReactionsOK() *IssueGetCommentReactionsOK {
	return &IssueGetCommentReactionsOK{}
}

/*
IssueGetCommentReactionsOK describes a response with status code 200, with default header values.

ReactionList
*/
type IssueGetCommentReactionsOK struct {
	Payload []*models.Reaction
}

// IsSuccess returns true when this issue get comment reactions o k response has a 2xx status code
func (o *IssueGetCommentReactionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue get comment reactions o k response has a 3xx status code
func (o *IssueGetCommentReactionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue get comment reactions o k response has a 4xx status code
func (o *IssueGetCommentReactionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue get comment reactions o k response has a 5xx status code
func (o *IssueGetCommentReactionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this issue get comment reactions o k response a status code equal to that given
func (o *IssueGetCommentReactionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the issue get comment reactions o k response
func (o *IssueGetCommentReactionsOK) Code() int {
	return 200
}

func (o *IssueGetCommentReactionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments/{id}/reactions][%d] issueGetCommentReactionsOK %s", 200, payload)
}

func (o *IssueGetCommentReactionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments/{id}/reactions][%d] issueGetCommentReactionsOK %s", 200, payload)
}

func (o *IssueGetCommentReactionsOK) GetPayload() []*models.Reaction {
	return o.Payload
}

func (o *IssueGetCommentReactionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueGetCommentReactionsForbidden creates a IssueGetCommentReactionsForbidden with default headers values
func NewIssueGetCommentReactionsForbidden() *IssueGetCommentReactionsForbidden {
	return &IssueGetCommentReactionsForbidden{}
}

/*
IssueGetCommentReactionsForbidden describes a response with status code 403, with default header values.

APIForbiddenError is a forbidden error response
*/
type IssueGetCommentReactionsForbidden struct {
	Message string
	URL     string
}

// IsSuccess returns true when this issue get comment reactions forbidden response has a 2xx status code
func (o *IssueGetCommentReactionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue get comment reactions forbidden response has a 3xx status code
func (o *IssueGetCommentReactionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue get comment reactions forbidden response has a 4xx status code
func (o *IssueGetCommentReactionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue get comment reactions forbidden response has a 5xx status code
func (o *IssueGetCommentReactionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this issue get comment reactions forbidden response a status code equal to that given
func (o *IssueGetCommentReactionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the issue get comment reactions forbidden response
func (o *IssueGetCommentReactionsForbidden) Code() int {
	return 403
}

func (o *IssueGetCommentReactionsForbidden) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments/{id}/reactions][%d] issueGetCommentReactionsForbidden", 403)
}

func (o *IssueGetCommentReactionsForbidden) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments/{id}/reactions][%d] issueGetCommentReactionsForbidden", 403)
}

func (o *IssueGetCommentReactionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header message
	hdrMessage := response.GetHeader("message")

	if hdrMessage != "" {
		o.Message = hdrMessage
	}

	// hydrates response header url
	hdrURL := response.GetHeader("url")

	if hdrURL != "" {
		o.URL = hdrURL
	}

	return nil
}

// NewIssueGetCommentReactionsNotFound creates a IssueGetCommentReactionsNotFound with default headers values
func NewIssueGetCommentReactionsNotFound() *IssueGetCommentReactionsNotFound {
	return &IssueGetCommentReactionsNotFound{}
}

/*
IssueGetCommentReactionsNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type IssueGetCommentReactionsNotFound struct {
}

// IsSuccess returns true when this issue get comment reactions not found response has a 2xx status code
func (o *IssueGetCommentReactionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue get comment reactions not found response has a 3xx status code
func (o *IssueGetCommentReactionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue get comment reactions not found response has a 4xx status code
func (o *IssueGetCommentReactionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue get comment reactions not found response has a 5xx status code
func (o *IssueGetCommentReactionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this issue get comment reactions not found response a status code equal to that given
func (o *IssueGetCommentReactionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the issue get comment reactions not found response
func (o *IssueGetCommentReactionsNotFound) Code() int {
	return 404
}

func (o *IssueGetCommentReactionsNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments/{id}/reactions][%d] issueGetCommentReactionsNotFound", 404)
}

func (o *IssueGetCommentReactionsNotFound) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments/{id}/reactions][%d] issueGetCommentReactionsNotFound", 404)
}

func (o *IssueGetCommentReactionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
