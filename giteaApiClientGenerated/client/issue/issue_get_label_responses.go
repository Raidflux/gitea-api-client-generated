// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"giteaApiClientGenerated/models"
)

// IssueGetLabelReader is a Reader for the IssueGetLabel structure.
type IssueGetLabelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueGetLabelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueGetLabelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewIssueGetLabelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /repos/{owner}/{repo}/labels/{id}] issueGetLabel", response, response.Code())
	}
}

// NewIssueGetLabelOK creates a IssueGetLabelOK with default headers values
func NewIssueGetLabelOK() *IssueGetLabelOK {
	return &IssueGetLabelOK{}
}

/*
IssueGetLabelOK describes a response with status code 200, with default header values.

Label
*/
type IssueGetLabelOK struct {
	Payload *models.Label
}

// IsSuccess returns true when this issue get label o k response has a 2xx status code
func (o *IssueGetLabelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue get label o k response has a 3xx status code
func (o *IssueGetLabelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue get label o k response has a 4xx status code
func (o *IssueGetLabelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue get label o k response has a 5xx status code
func (o *IssueGetLabelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this issue get label o k response a status code equal to that given
func (o *IssueGetLabelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the issue get label o k response
func (o *IssueGetLabelOK) Code() int {
	return 200
}

func (o *IssueGetLabelOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/labels/{id}][%d] issueGetLabelOK %s", 200, payload)
}

func (o *IssueGetLabelOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/labels/{id}][%d] issueGetLabelOK %s", 200, payload)
}

func (o *IssueGetLabelOK) GetPayload() *models.Label {
	return o.Payload
}

func (o *IssueGetLabelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Label)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueGetLabelNotFound creates a IssueGetLabelNotFound with default headers values
func NewIssueGetLabelNotFound() *IssueGetLabelNotFound {
	return &IssueGetLabelNotFound{}
}

/*
IssueGetLabelNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type IssueGetLabelNotFound struct {
}

// IsSuccess returns true when this issue get label not found response has a 2xx status code
func (o *IssueGetLabelNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue get label not found response has a 3xx status code
func (o *IssueGetLabelNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue get label not found response has a 4xx status code
func (o *IssueGetLabelNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue get label not found response has a 5xx status code
func (o *IssueGetLabelNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this issue get label not found response a status code equal to that given
func (o *IssueGetLabelNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the issue get label not found response
func (o *IssueGetLabelNotFound) Code() int {
	return 404
}

func (o *IssueGetLabelNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/labels/{id}][%d] issueGetLabelNotFound", 404)
}

func (o *IssueGetLabelNotFound) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/labels/{id}][%d] issueGetLabelNotFound", 404)
}

func (o *IssueGetLabelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
