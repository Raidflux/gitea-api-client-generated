// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewIssueCreateIssueCommentAttachmentParams creates a new IssueCreateIssueCommentAttachmentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIssueCreateIssueCommentAttachmentParams() *IssueCreateIssueCommentAttachmentParams {
	return &IssueCreateIssueCommentAttachmentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewIssueCreateIssueCommentAttachmentParamsWithTimeout creates a new IssueCreateIssueCommentAttachmentParams object
// with the ability to set a timeout on a request.
func NewIssueCreateIssueCommentAttachmentParamsWithTimeout(timeout time.Duration) *IssueCreateIssueCommentAttachmentParams {
	return &IssueCreateIssueCommentAttachmentParams{
		timeout: timeout,
	}
}

// NewIssueCreateIssueCommentAttachmentParamsWithContext creates a new IssueCreateIssueCommentAttachmentParams object
// with the ability to set a context for a request.
func NewIssueCreateIssueCommentAttachmentParamsWithContext(ctx context.Context) *IssueCreateIssueCommentAttachmentParams {
	return &IssueCreateIssueCommentAttachmentParams{
		Context: ctx,
	}
}

// NewIssueCreateIssueCommentAttachmentParamsWithHTTPClient creates a new IssueCreateIssueCommentAttachmentParams object
// with the ability to set a custom HTTPClient for a request.
func NewIssueCreateIssueCommentAttachmentParamsWithHTTPClient(client *http.Client) *IssueCreateIssueCommentAttachmentParams {
	return &IssueCreateIssueCommentAttachmentParams{
		HTTPClient: client,
	}
}

/*
IssueCreateIssueCommentAttachmentParams contains all the parameters to send to the API endpoint

	for the issue create issue comment attachment operation.

	Typically these are written to a http.Request.
*/
type IssueCreateIssueCommentAttachmentParams struct {

	/* Attachment.

	   attachment to upload
	*/
	Attachment runtime.NamedReadCloser

	/* ID.

	   id of the comment

	   Format: int64
	*/
	ID int64

	/* Name.

	   name of the attachment
	*/
	Name *string

	/* Owner.

	   owner of the repo
	*/
	Owner string

	/* Repo.

	   name of the repo
	*/
	Repo string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the issue create issue comment attachment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IssueCreateIssueCommentAttachmentParams) WithDefaults() *IssueCreateIssueCommentAttachmentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the issue create issue comment attachment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IssueCreateIssueCommentAttachmentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) WithTimeout(timeout time.Duration) *IssueCreateIssueCommentAttachmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) WithContext(ctx context.Context) *IssueCreateIssueCommentAttachmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) WithHTTPClient(client *http.Client) *IssueCreateIssueCommentAttachmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttachment adds the attachment to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) WithAttachment(attachment runtime.NamedReadCloser) *IssueCreateIssueCommentAttachmentParams {
	o.SetAttachment(attachment)
	return o
}

// SetAttachment adds the attachment to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) SetAttachment(attachment runtime.NamedReadCloser) {
	o.Attachment = attachment
}

// WithID adds the id to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) WithID(id int64) *IssueCreateIssueCommentAttachmentParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) SetID(id int64) {
	o.ID = id
}

// WithName adds the name to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) WithName(name *string) *IssueCreateIssueCommentAttachmentParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) SetName(name *string) {
	o.Name = name
}

// WithOwner adds the owner to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) WithOwner(owner string) *IssueCreateIssueCommentAttachmentParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithRepo adds the repo to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) WithRepo(repo string) *IssueCreateIssueCommentAttachmentParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the issue create issue comment attachment params
func (o *IssueCreateIssueCommentAttachmentParams) SetRepo(repo string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *IssueCreateIssueCommentAttachmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	// form file param attachment
	if err := r.SetFileParam("attachment", o.Attachment); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
