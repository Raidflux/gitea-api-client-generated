// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Raidflux/gitea-api-client-generated/giteaApiClientGenerated/models"
)

// IssueGetRepoCommentsReader is a Reader for the IssueGetRepoComments structure.
type IssueGetRepoCommentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueGetRepoCommentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueGetRepoCommentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewIssueGetRepoCommentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /repos/{owner}/{repo}/issues/comments] issueGetRepoComments", response, response.Code())
	}
}

// NewIssueGetRepoCommentsOK creates a IssueGetRepoCommentsOK with default headers values
func NewIssueGetRepoCommentsOK() *IssueGetRepoCommentsOK {
	return &IssueGetRepoCommentsOK{}
}

/*
IssueGetRepoCommentsOK describes a response with status code 200, with default header values.

CommentList
*/
type IssueGetRepoCommentsOK struct {
	Payload []*models.Comment
}

// IsSuccess returns true when this issue get repo comments o k response has a 2xx status code
func (o *IssueGetRepoCommentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue get repo comments o k response has a 3xx status code
func (o *IssueGetRepoCommentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue get repo comments o k response has a 4xx status code
func (o *IssueGetRepoCommentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue get repo comments o k response has a 5xx status code
func (o *IssueGetRepoCommentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this issue get repo comments o k response a status code equal to that given
func (o *IssueGetRepoCommentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the issue get repo comments o k response
func (o *IssueGetRepoCommentsOK) Code() int {
	return 200
}

func (o *IssueGetRepoCommentsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments][%d] issueGetRepoCommentsOK %s", 200, payload)
}

func (o *IssueGetRepoCommentsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments][%d] issueGetRepoCommentsOK %s", 200, payload)
}

func (o *IssueGetRepoCommentsOK) GetPayload() []*models.Comment {
	return o.Payload
}

func (o *IssueGetRepoCommentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueGetRepoCommentsNotFound creates a IssueGetRepoCommentsNotFound with default headers values
func NewIssueGetRepoCommentsNotFound() *IssueGetRepoCommentsNotFound {
	return &IssueGetRepoCommentsNotFound{}
}

/*
IssueGetRepoCommentsNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type IssueGetRepoCommentsNotFound struct {
}

// IsSuccess returns true when this issue get repo comments not found response has a 2xx status code
func (o *IssueGetRepoCommentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue get repo comments not found response has a 3xx status code
func (o *IssueGetRepoCommentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue get repo comments not found response has a 4xx status code
func (o *IssueGetRepoCommentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue get repo comments not found response has a 5xx status code
func (o *IssueGetRepoCommentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this issue get repo comments not found response a status code equal to that given
func (o *IssueGetRepoCommentsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the issue get repo comments not found response
func (o *IssueGetRepoCommentsNotFound) Code() int {
	return 404
}

func (o *IssueGetRepoCommentsNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments][%d] issueGetRepoCommentsNotFound", 404)
}

func (o *IssueGetRepoCommentsNotFound) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments][%d] issueGetRepoCommentsNotFound", 404)
}

func (o *IssueGetRepoCommentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
