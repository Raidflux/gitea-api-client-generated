// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"giteaApiClientGenerated/models"
)

// IssueTrackedTimesReader is a Reader for the IssueTrackedTimes structure.
type IssueTrackedTimesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueTrackedTimesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueTrackedTimesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewIssueTrackedTimesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /repos/{owner}/{repo}/issues/{index}/times] issueTrackedTimes", response, response.Code())
	}
}

// NewIssueTrackedTimesOK creates a IssueTrackedTimesOK with default headers values
func NewIssueTrackedTimesOK() *IssueTrackedTimesOK {
	return &IssueTrackedTimesOK{}
}

/*
IssueTrackedTimesOK describes a response with status code 200, with default header values.

TrackedTimeList
*/
type IssueTrackedTimesOK struct {
	Payload []*models.TrackedTime
}

// IsSuccess returns true when this issue tracked times o k response has a 2xx status code
func (o *IssueTrackedTimesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue tracked times o k response has a 3xx status code
func (o *IssueTrackedTimesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue tracked times o k response has a 4xx status code
func (o *IssueTrackedTimesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue tracked times o k response has a 5xx status code
func (o *IssueTrackedTimesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this issue tracked times o k response a status code equal to that given
func (o *IssueTrackedTimesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the issue tracked times o k response
func (o *IssueTrackedTimesOK) Code() int {
	return 200
}

func (o *IssueTrackedTimesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/{index}/times][%d] issueTrackedTimesOK %s", 200, payload)
}

func (o *IssueTrackedTimesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/{index}/times][%d] issueTrackedTimesOK %s", 200, payload)
}

func (o *IssueTrackedTimesOK) GetPayload() []*models.TrackedTime {
	return o.Payload
}

func (o *IssueTrackedTimesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueTrackedTimesNotFound creates a IssueTrackedTimesNotFound with default headers values
func NewIssueTrackedTimesNotFound() *IssueTrackedTimesNotFound {
	return &IssueTrackedTimesNotFound{}
}

/*
IssueTrackedTimesNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type IssueTrackedTimesNotFound struct {
}

// IsSuccess returns true when this issue tracked times not found response has a 2xx status code
func (o *IssueTrackedTimesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue tracked times not found response has a 3xx status code
func (o *IssueTrackedTimesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue tracked times not found response has a 4xx status code
func (o *IssueTrackedTimesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue tracked times not found response has a 5xx status code
func (o *IssueTrackedTimesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this issue tracked times not found response a status code equal to that given
func (o *IssueTrackedTimesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the issue tracked times not found response
func (o *IssueTrackedTimesNotFound) Code() int {
	return 404
}

func (o *IssueTrackedTimesNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/{index}/times][%d] issueTrackedTimesNotFound", 404)
}

func (o *IssueTrackedTimesNotFound) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/{index}/times][%d] issueTrackedTimesNotFound", 404)
}

func (o *IssueTrackedTimesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
