// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Raidflux/gitea-api-client-generated/giteaApiClientGenerated/models"
)

// IssueGetIssueCommentAttachmentReader is a Reader for the IssueGetIssueCommentAttachment structure.
type IssueGetIssueCommentAttachmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueGetIssueCommentAttachmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueGetIssueCommentAttachmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewIssueGetIssueCommentAttachmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}] issueGetIssueCommentAttachment", response, response.Code())
	}
}

// NewIssueGetIssueCommentAttachmentOK creates a IssueGetIssueCommentAttachmentOK with default headers values
func NewIssueGetIssueCommentAttachmentOK() *IssueGetIssueCommentAttachmentOK {
	return &IssueGetIssueCommentAttachmentOK{}
}

/*
IssueGetIssueCommentAttachmentOK describes a response with status code 200, with default header values.

Attachment
*/
type IssueGetIssueCommentAttachmentOK struct {
	Payload *models.Attachment
}

// IsSuccess returns true when this issue get issue comment attachment o k response has a 2xx status code
func (o *IssueGetIssueCommentAttachmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue get issue comment attachment o k response has a 3xx status code
func (o *IssueGetIssueCommentAttachmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue get issue comment attachment o k response has a 4xx status code
func (o *IssueGetIssueCommentAttachmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue get issue comment attachment o k response has a 5xx status code
func (o *IssueGetIssueCommentAttachmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this issue get issue comment attachment o k response a status code equal to that given
func (o *IssueGetIssueCommentAttachmentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the issue get issue comment attachment o k response
func (o *IssueGetIssueCommentAttachmentOK) Code() int {
	return 200
}

func (o *IssueGetIssueCommentAttachmentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}][%d] issueGetIssueCommentAttachmentOK %s", 200, payload)
}

func (o *IssueGetIssueCommentAttachmentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}][%d] issueGetIssueCommentAttachmentOK %s", 200, payload)
}

func (o *IssueGetIssueCommentAttachmentOK) GetPayload() *models.Attachment {
	return o.Payload
}

func (o *IssueGetIssueCommentAttachmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Attachment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueGetIssueCommentAttachmentNotFound creates a IssueGetIssueCommentAttachmentNotFound with default headers values
func NewIssueGetIssueCommentAttachmentNotFound() *IssueGetIssueCommentAttachmentNotFound {
	return &IssueGetIssueCommentAttachmentNotFound{}
}

/*
IssueGetIssueCommentAttachmentNotFound describes a response with status code 404, with default header values.

APIError is error format response
*/
type IssueGetIssueCommentAttachmentNotFound struct {
	Message string
	URL     string
}

// IsSuccess returns true when this issue get issue comment attachment not found response has a 2xx status code
func (o *IssueGetIssueCommentAttachmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue get issue comment attachment not found response has a 3xx status code
func (o *IssueGetIssueCommentAttachmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue get issue comment attachment not found response has a 4xx status code
func (o *IssueGetIssueCommentAttachmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue get issue comment attachment not found response has a 5xx status code
func (o *IssueGetIssueCommentAttachmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this issue get issue comment attachment not found response a status code equal to that given
func (o *IssueGetIssueCommentAttachmentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the issue get issue comment attachment not found response
func (o *IssueGetIssueCommentAttachmentNotFound) Code() int {
	return 404
}

func (o *IssueGetIssueCommentAttachmentNotFound) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}][%d] issueGetIssueCommentAttachmentNotFound", 404)
}

func (o *IssueGetIssueCommentAttachmentNotFound) String() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}][%d] issueGetIssueCommentAttachmentNotFound", 404)
}

func (o *IssueGetIssueCommentAttachmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header message
	hdrMessage := response.GetHeader("message")

	if hdrMessage != "" {
		o.Message = hdrMessage
	}

	// hydrates response header url
	hdrURL := response.GetHeader("url")

	if hdrURL != "" {
		o.URL = hdrURL
	}

	return nil
}
