// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"giteaApiClientGenerated/models"
)

// IssueEditIssueCommentAttachmentReader is a Reader for the IssueEditIssueCommentAttachment structure.
type IssueEditIssueCommentAttachmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueEditIssueCommentAttachmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewIssueEditIssueCommentAttachmentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewIssueEditIssueCommentAttachmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 423:
		result := NewIssueEditIssueCommentAttachmentLocked()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}] issueEditIssueCommentAttachment", response, response.Code())
	}
}

// NewIssueEditIssueCommentAttachmentCreated creates a IssueEditIssueCommentAttachmentCreated with default headers values
func NewIssueEditIssueCommentAttachmentCreated() *IssueEditIssueCommentAttachmentCreated {
	return &IssueEditIssueCommentAttachmentCreated{}
}

/*
IssueEditIssueCommentAttachmentCreated describes a response with status code 201, with default header values.

Attachment
*/
type IssueEditIssueCommentAttachmentCreated struct {
	Payload *models.Attachment
}

// IsSuccess returns true when this issue edit issue comment attachment created response has a 2xx status code
func (o *IssueEditIssueCommentAttachmentCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue edit issue comment attachment created response has a 3xx status code
func (o *IssueEditIssueCommentAttachmentCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue edit issue comment attachment created response has a 4xx status code
func (o *IssueEditIssueCommentAttachmentCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue edit issue comment attachment created response has a 5xx status code
func (o *IssueEditIssueCommentAttachmentCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this issue edit issue comment attachment created response a status code equal to that given
func (o *IssueEditIssueCommentAttachmentCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the issue edit issue comment attachment created response
func (o *IssueEditIssueCommentAttachmentCreated) Code() int {
	return 201
}

func (o *IssueEditIssueCommentAttachmentCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}][%d] issueEditIssueCommentAttachmentCreated %s", 201, payload)
}

func (o *IssueEditIssueCommentAttachmentCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}][%d] issueEditIssueCommentAttachmentCreated %s", 201, payload)
}

func (o *IssueEditIssueCommentAttachmentCreated) GetPayload() *models.Attachment {
	return o.Payload
}

func (o *IssueEditIssueCommentAttachmentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Attachment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueEditIssueCommentAttachmentNotFound creates a IssueEditIssueCommentAttachmentNotFound with default headers values
func NewIssueEditIssueCommentAttachmentNotFound() *IssueEditIssueCommentAttachmentNotFound {
	return &IssueEditIssueCommentAttachmentNotFound{}
}

/*
IssueEditIssueCommentAttachmentNotFound describes a response with status code 404, with default header values.

APIError is error format response
*/
type IssueEditIssueCommentAttachmentNotFound struct {
	Message string
	URL     string
}

// IsSuccess returns true when this issue edit issue comment attachment not found response has a 2xx status code
func (o *IssueEditIssueCommentAttachmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue edit issue comment attachment not found response has a 3xx status code
func (o *IssueEditIssueCommentAttachmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue edit issue comment attachment not found response has a 4xx status code
func (o *IssueEditIssueCommentAttachmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue edit issue comment attachment not found response has a 5xx status code
func (o *IssueEditIssueCommentAttachmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this issue edit issue comment attachment not found response a status code equal to that given
func (o *IssueEditIssueCommentAttachmentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the issue edit issue comment attachment not found response
func (o *IssueEditIssueCommentAttachmentNotFound) Code() int {
	return 404
}

func (o *IssueEditIssueCommentAttachmentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}][%d] issueEditIssueCommentAttachmentNotFound", 404)
}

func (o *IssueEditIssueCommentAttachmentNotFound) String() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}][%d] issueEditIssueCommentAttachmentNotFound", 404)
}

func (o *IssueEditIssueCommentAttachmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header message
	hdrMessage := response.GetHeader("message")

	if hdrMessage != "" {
		o.Message = hdrMessage
	}

	// hydrates response header url
	hdrURL := response.GetHeader("url")

	if hdrURL != "" {
		o.URL = hdrURL
	}

	return nil
}

// NewIssueEditIssueCommentAttachmentLocked creates a IssueEditIssueCommentAttachmentLocked with default headers values
func NewIssueEditIssueCommentAttachmentLocked() *IssueEditIssueCommentAttachmentLocked {
	return &IssueEditIssueCommentAttachmentLocked{}
}

/*
IssueEditIssueCommentAttachmentLocked describes a response with status code 423, with default header values.

APIRepoArchivedError is an error that is raised when an archived repo should be modified
*/
type IssueEditIssueCommentAttachmentLocked struct {
	Message string
	URL     string
}

// IsSuccess returns true when this issue edit issue comment attachment locked response has a 2xx status code
func (o *IssueEditIssueCommentAttachmentLocked) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue edit issue comment attachment locked response has a 3xx status code
func (o *IssueEditIssueCommentAttachmentLocked) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue edit issue comment attachment locked response has a 4xx status code
func (o *IssueEditIssueCommentAttachmentLocked) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue edit issue comment attachment locked response has a 5xx status code
func (o *IssueEditIssueCommentAttachmentLocked) IsServerError() bool {
	return false
}

// IsCode returns true when this issue edit issue comment attachment locked response a status code equal to that given
func (o *IssueEditIssueCommentAttachmentLocked) IsCode(code int) bool {
	return code == 423
}

// Code gets the status code for the issue edit issue comment attachment locked response
func (o *IssueEditIssueCommentAttachmentLocked) Code() int {
	return 423
}

func (o *IssueEditIssueCommentAttachmentLocked) Error() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}][%d] issueEditIssueCommentAttachmentLocked", 423)
}

func (o *IssueEditIssueCommentAttachmentLocked) String() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}][%d] issueEditIssueCommentAttachmentLocked", 423)
}

func (o *IssueEditIssueCommentAttachmentLocked) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header message
	hdrMessage := response.GetHeader("message")

	if hdrMessage != "" {
		o.Message = hdrMessage
	}

	// hydrates response header url
	hdrURL := response.GetHeader("url")

	if hdrURL != "" {
		o.URL = hdrURL
	}

	return nil
}
