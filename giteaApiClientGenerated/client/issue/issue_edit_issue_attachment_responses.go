// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"giteaApiClientGenerated/models"
)

// IssueEditIssueAttachmentReader is a Reader for the IssueEditIssueAttachment structure.
type IssueEditIssueAttachmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueEditIssueAttachmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewIssueEditIssueAttachmentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewIssueEditIssueAttachmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 423:
		result := NewIssueEditIssueAttachmentLocked()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}] issueEditIssueAttachment", response, response.Code())
	}
}

// NewIssueEditIssueAttachmentCreated creates a IssueEditIssueAttachmentCreated with default headers values
func NewIssueEditIssueAttachmentCreated() *IssueEditIssueAttachmentCreated {
	return &IssueEditIssueAttachmentCreated{}
}

/*
IssueEditIssueAttachmentCreated describes a response with status code 201, with default header values.

Attachment
*/
type IssueEditIssueAttachmentCreated struct {
	Payload *models.Attachment
}

// IsSuccess returns true when this issue edit issue attachment created response has a 2xx status code
func (o *IssueEditIssueAttachmentCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue edit issue attachment created response has a 3xx status code
func (o *IssueEditIssueAttachmentCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue edit issue attachment created response has a 4xx status code
func (o *IssueEditIssueAttachmentCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue edit issue attachment created response has a 5xx status code
func (o *IssueEditIssueAttachmentCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this issue edit issue attachment created response a status code equal to that given
func (o *IssueEditIssueAttachmentCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the issue edit issue attachment created response
func (o *IssueEditIssueAttachmentCreated) Code() int {
	return 201
}

func (o *IssueEditIssueAttachmentCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}][%d] issueEditIssueAttachmentCreated %s", 201, payload)
}

func (o *IssueEditIssueAttachmentCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}][%d] issueEditIssueAttachmentCreated %s", 201, payload)
}

func (o *IssueEditIssueAttachmentCreated) GetPayload() *models.Attachment {
	return o.Payload
}

func (o *IssueEditIssueAttachmentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Attachment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueEditIssueAttachmentNotFound creates a IssueEditIssueAttachmentNotFound with default headers values
func NewIssueEditIssueAttachmentNotFound() *IssueEditIssueAttachmentNotFound {
	return &IssueEditIssueAttachmentNotFound{}
}

/*
IssueEditIssueAttachmentNotFound describes a response with status code 404, with default header values.

APIError is error format response
*/
type IssueEditIssueAttachmentNotFound struct {
	Message string
	URL     string
}

// IsSuccess returns true when this issue edit issue attachment not found response has a 2xx status code
func (o *IssueEditIssueAttachmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue edit issue attachment not found response has a 3xx status code
func (o *IssueEditIssueAttachmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue edit issue attachment not found response has a 4xx status code
func (o *IssueEditIssueAttachmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue edit issue attachment not found response has a 5xx status code
func (o *IssueEditIssueAttachmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this issue edit issue attachment not found response a status code equal to that given
func (o *IssueEditIssueAttachmentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the issue edit issue attachment not found response
func (o *IssueEditIssueAttachmentNotFound) Code() int {
	return 404
}

func (o *IssueEditIssueAttachmentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}][%d] issueEditIssueAttachmentNotFound", 404)
}

func (o *IssueEditIssueAttachmentNotFound) String() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}][%d] issueEditIssueAttachmentNotFound", 404)
}

func (o *IssueEditIssueAttachmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header message
	hdrMessage := response.GetHeader("message")

	if hdrMessage != "" {
		o.Message = hdrMessage
	}

	// hydrates response header url
	hdrURL := response.GetHeader("url")

	if hdrURL != "" {
		o.URL = hdrURL
	}

	return nil
}

// NewIssueEditIssueAttachmentLocked creates a IssueEditIssueAttachmentLocked with default headers values
func NewIssueEditIssueAttachmentLocked() *IssueEditIssueAttachmentLocked {
	return &IssueEditIssueAttachmentLocked{}
}

/*
IssueEditIssueAttachmentLocked describes a response with status code 423, with default header values.

APIRepoArchivedError is an error that is raised when an archived repo should be modified
*/
type IssueEditIssueAttachmentLocked struct {
	Message string
	URL     string
}

// IsSuccess returns true when this issue edit issue attachment locked response has a 2xx status code
func (o *IssueEditIssueAttachmentLocked) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue edit issue attachment locked response has a 3xx status code
func (o *IssueEditIssueAttachmentLocked) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue edit issue attachment locked response has a 4xx status code
func (o *IssueEditIssueAttachmentLocked) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue edit issue attachment locked response has a 5xx status code
func (o *IssueEditIssueAttachmentLocked) IsServerError() bool {
	return false
}

// IsCode returns true when this issue edit issue attachment locked response a status code equal to that given
func (o *IssueEditIssueAttachmentLocked) IsCode(code int) bool {
	return code == 423
}

// Code gets the status code for the issue edit issue attachment locked response
func (o *IssueEditIssueAttachmentLocked) Code() int {
	return 423
}

func (o *IssueEditIssueAttachmentLocked) Error() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}][%d] issueEditIssueAttachmentLocked", 423)
}

func (o *IssueEditIssueAttachmentLocked) String() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}][%d] issueEditIssueAttachmentLocked", 423)
}

func (o *IssueEditIssueAttachmentLocked) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header message
	hdrMessage := response.GetHeader("message")

	if hdrMessage != "" {
		o.Message = hdrMessage
	}

	// hydrates response header url
	hdrURL := response.GetHeader("url")

	if hdrURL != "" {
		o.URL = hdrURL
	}

	return nil
}
