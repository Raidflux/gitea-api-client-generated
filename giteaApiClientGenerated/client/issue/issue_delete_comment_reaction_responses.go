// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// IssueDeleteCommentReactionReader is a Reader for the IssueDeleteCommentReaction structure.
type IssueDeleteCommentReactionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueDeleteCommentReactionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueDeleteCommentReactionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewIssueDeleteCommentReactionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIssueDeleteCommentReactionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /repos/{owner}/{repo}/issues/comments/{id}/reactions] issueDeleteCommentReaction", response, response.Code())
	}
}

// NewIssueDeleteCommentReactionOK creates a IssueDeleteCommentReactionOK with default headers values
func NewIssueDeleteCommentReactionOK() *IssueDeleteCommentReactionOK {
	return &IssueDeleteCommentReactionOK{}
}

/*
IssueDeleteCommentReactionOK describes a response with status code 200, with default header values.

APIEmpty is an empty response
*/
type IssueDeleteCommentReactionOK struct {
}

// IsSuccess returns true when this issue delete comment reaction o k response has a 2xx status code
func (o *IssueDeleteCommentReactionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this issue delete comment reaction o k response has a 3xx status code
func (o *IssueDeleteCommentReactionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue delete comment reaction o k response has a 4xx status code
func (o *IssueDeleteCommentReactionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this issue delete comment reaction o k response has a 5xx status code
func (o *IssueDeleteCommentReactionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this issue delete comment reaction o k response a status code equal to that given
func (o *IssueDeleteCommentReactionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the issue delete comment reaction o k response
func (o *IssueDeleteCommentReactionOK) Code() int {
	return 200
}

func (o *IssueDeleteCommentReactionOK) Error() string {
	return fmt.Sprintf("[DELETE /repos/{owner}/{repo}/issues/comments/{id}/reactions][%d] issueDeleteCommentReactionOK", 200)
}

func (o *IssueDeleteCommentReactionOK) String() string {
	return fmt.Sprintf("[DELETE /repos/{owner}/{repo}/issues/comments/{id}/reactions][%d] issueDeleteCommentReactionOK", 200)
}

func (o *IssueDeleteCommentReactionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueDeleteCommentReactionForbidden creates a IssueDeleteCommentReactionForbidden with default headers values
func NewIssueDeleteCommentReactionForbidden() *IssueDeleteCommentReactionForbidden {
	return &IssueDeleteCommentReactionForbidden{}
}

/*
IssueDeleteCommentReactionForbidden describes a response with status code 403, with default header values.

APIForbiddenError is a forbidden error response
*/
type IssueDeleteCommentReactionForbidden struct {
	Message string
	URL     string
}

// IsSuccess returns true when this issue delete comment reaction forbidden response has a 2xx status code
func (o *IssueDeleteCommentReactionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue delete comment reaction forbidden response has a 3xx status code
func (o *IssueDeleteCommentReactionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue delete comment reaction forbidden response has a 4xx status code
func (o *IssueDeleteCommentReactionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue delete comment reaction forbidden response has a 5xx status code
func (o *IssueDeleteCommentReactionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this issue delete comment reaction forbidden response a status code equal to that given
func (o *IssueDeleteCommentReactionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the issue delete comment reaction forbidden response
func (o *IssueDeleteCommentReactionForbidden) Code() int {
	return 403
}

func (o *IssueDeleteCommentReactionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /repos/{owner}/{repo}/issues/comments/{id}/reactions][%d] issueDeleteCommentReactionForbidden", 403)
}

func (o *IssueDeleteCommentReactionForbidden) String() string {
	return fmt.Sprintf("[DELETE /repos/{owner}/{repo}/issues/comments/{id}/reactions][%d] issueDeleteCommentReactionForbidden", 403)
}

func (o *IssueDeleteCommentReactionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header message
	hdrMessage := response.GetHeader("message")

	if hdrMessage != "" {
		o.Message = hdrMessage
	}

	// hydrates response header url
	hdrURL := response.GetHeader("url")

	if hdrURL != "" {
		o.URL = hdrURL
	}

	return nil
}

// NewIssueDeleteCommentReactionNotFound creates a IssueDeleteCommentReactionNotFound with default headers values
func NewIssueDeleteCommentReactionNotFound() *IssueDeleteCommentReactionNotFound {
	return &IssueDeleteCommentReactionNotFound{}
}

/*
IssueDeleteCommentReactionNotFound describes a response with status code 404, with default header values.

APINotFound is a not found empty response
*/
type IssueDeleteCommentReactionNotFound struct {
}

// IsSuccess returns true when this issue delete comment reaction not found response has a 2xx status code
func (o *IssueDeleteCommentReactionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this issue delete comment reaction not found response has a 3xx status code
func (o *IssueDeleteCommentReactionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this issue delete comment reaction not found response has a 4xx status code
func (o *IssueDeleteCommentReactionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this issue delete comment reaction not found response has a 5xx status code
func (o *IssueDeleteCommentReactionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this issue delete comment reaction not found response a status code equal to that given
func (o *IssueDeleteCommentReactionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the issue delete comment reaction not found response
func (o *IssueDeleteCommentReactionNotFound) Code() int {
	return 404
}

func (o *IssueDeleteCommentReactionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /repos/{owner}/{repo}/issues/comments/{id}/reactions][%d] issueDeleteCommentReactionNotFound", 404)
}

func (o *IssueDeleteCommentReactionNotFound) String() string {
	return fmt.Sprintf("[DELETE /repos/{owner}/{repo}/issues/comments/{id}/reactions][%d] issueDeleteCommentReactionNotFound", 404)
}

func (o *IssueDeleteCommentReactionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
